package rail.gabdullin;

/**
 * Класс игрока. Хранит его символ и имя. Однако, логика хода, по факту, реализована в слушателе кнопке игрового поля.
 * Так как этот метод реализуется в наследнике PlayerAI, то здесь его решено было оставить.
 */
public class Player {

    private char playerSymbol;

    private String name;

    /**
     * В конструкторе заполняем поля. Символ игрока передается при создании из класса Game
     */

    Player(char playerSymbol){
        this.playerSymbol = playerSymbol;
        this.name = "Игрок";
    }

    /**
     * Возращает символ игрока. Применяется для получения симола текущего игрока при осущестлении хода и поздравлении победителя.
     * @return исмол игрока в char
     */
    public char getPlayerSymbol() {
        return playerSymbol;
    }

    /**
     * Пустой метод, так как по факту, логика хода человека реализована в слушателе кнопке игрового поля.
     * Так как этот метод реализуется в наследнике PlayerAI, то здесь его решено было оставить.
     */
    public void makeStep() {
    }

    /**
     * Метод позволяет устаноить имя игрока, чтобы затем поздравить его с победой по имени. Используется в дилоговом
     * окне настроек SettingsDialog в слушателе кнопки saveSettings.
     * @param name - принимает имя игрока с типом String
     */
    public void setName(String name) {
        this.name = name;
    }

    /**
     * Метод возвращает имя игрока для того, чтобы его можно было поздравить с победой по имени. Используется в nextStep()
     * класса Game.
     * @return - имя игрока типом String
     */
    public String getName() {
        return name;
    }
}
